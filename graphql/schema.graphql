"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    categories(orderBy: _ @orderBy): [Category!]! @all
    category(name: String @eq): Category @find
    users: [User!]!
        # @middleware(checks: ["auth:api"])
        @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    me: User @auth @middleware(checks: ["auth:api"])

    bits(orderBy: _ @orderBy): [Bit!]!
        @middleware(checks: ["auth:api"])
        @paginate(defaultCount: 10)
    bit(id: ID @eq): Bit @find @middleware(checks: ["auth:api"])
    bookmarks(first: Int, page: Int): [Bit!]!
        @paginate(builder: "App\\Bookmark@allBookmarks")
        @middleware(checks: ["auth:api"])
}

type Mutation {
    login(
        username: String
            @rules(
                apply: ["required", "email"]
                messages: {
                    required: "The email field is required."
                    email: "The email must be a valid email address."
                }
            )
        password: String @rules(apply: ["required", "string"])
    ): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve"
        )
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve"
        )
    logout: LogoutResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve"
        )
    forgotPassword(
        email: String @rules(apply: ["required", "email", "exists:users"])
    ): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve"
        )
    updateForgottenPassword(
        email: String @rules(apply: ["required", "email"])
        token: String @rules(apply: ["required", "string"])
        password: String @rules(apply: ["required", "confirmed", "min:8"])
        password_confirmation: String
    ): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve"
        )
    register(
        name: String @rules(apply: ["required", "string"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
        password: String @rules(apply: ["required", "confirmed", "min:8"])
        password_confirmation: String
    ): RegisterResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve"
        )
    socialLogin(
        provider: String! @rules(apply: ["required"])
        token: String! @rules(apply: ["required"])
    ): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve"
        )
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve"
        )

    createBit(
        title: String @rules(apply: ["required"])
        snippet: String @rules(apply: ["required"])
        tags: [String!] @rulesForArray(apply: ["required", "min:1", "max:3"])
    ): Bit
        @field(resolver: "App\\GraphQL\\Mutations\\BitMutator@store")
        @middleware(checks: ["auth:api"])

    editBit(
        id: ID! @rules(apply: ["required", "exists:bits"])
        title: String @rules(apply: ["required"])
        snippet: String @rules(apply: ["required"])
        tags: [String!] @rulesForArray(apply: ["required", "min:1", "max:3"])
    ): Bit
        @field(resolver: "App\\GraphQL\\Mutations\\BitMutator@update")
        @middleware(checks: ["auth:api"])
        @can(ability: "update", model: "App\\Bit")

    # replyBit(
    #     bitId: Int! @rename(attribute: "bit_id") @rules(apply: ["required"])
    #     reply: String! @rules(apply: ["required"])
    # ): Reply! @create

    likeBit(bitId: Int): Bit
        @field(resolver: "App\\GraphQL\\Mutations\\LikeMutator")
        @middleware(checks: ["auth:api"])

    bookmarkBit(bitId: Int): Bit
        @field(resolver: "App\\GraphQL\\Mutations\\BookmarkMutator")
        @middleware(checks: ["auth:api"])
}

type Category {
    id: ID!
    name: String!
    icon: String!
    bits(first: Int!, page: Int!): [Bit!]!
        @belongsToMany(relation: "bits", type: "paginator")
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    bits(first: Int!, page: Int!): [Bit!]! @hasMany(type: "paginator")
    bookmarks(first: Int!, page: Int!): [Bit!]!
        @belongsToMany(relation: "bookmarks", type: "paginator")
}

type Bit {
    id: ID!
    user_id: ID!
    title: String!
    snippet: String!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
    likes_count: Int! @count(relation: "likes")
    isLiked: Boolean! @method(name: "isLiked")
    isBookmarked: Boolean! @method(name: "isBookmarked")
    tags: [String!]! @method(name: "associatedTags")
}

# type Reply {
#     id: ID!
#     # user_id: ID!
#     # bit_id: ID!
#     reply: String!
#     created_at: DateTime!
#     updated_at: DateTime!
#     bit: Bit! @belongsTo
#     user: User! @belongsTo
# }
